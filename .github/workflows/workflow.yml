# .github/workflows/ci_cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: california-housing-api
  DOCKER_REGISTRY: docker.io

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black
    
    - name: Create necessary directories
      run: |
        mkdir -p data/processed models logs
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Generate test data
      run: |
        python src/data_preprocessing.py
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: setup-and-test
    permissions:
      actions: write
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  data-preprocessing:
    runs-on: ubuntu-latest
    needs: setup-and-test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Data Preprocessing Training
      run: |
        python src/data_preprocessing.py

  model-training:
    runs-on: ubuntu-latest
    needs: data-preprocessing
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Data Preprocessing Training
      run: |
        python src/data_preprocessing.py
        
    - name: Model Training
      run: |
        python scripts/train_models.py

  model-performance-validation:
    runs-on: ubuntu-latest
    needs: model-training
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Data Preprocessing Training
      run: |
        python src/data_preprocessing.py
        
    - name: Model Training
      run: |
        python scripts/train_models.py

    - name: Validate model performance
      run: |
        python scripts/validate_model.py

  model-drift-check:
    runs-on: ubuntu-latest
    needs: model-performance-validation
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check model drift
      run: |
        python scripts/check_model_drift.py
    
    - name: Update monitoring metrics
      run: |
        python src/monitoring.py

  monitoring-health-check:
    runs-on: ubuntu-latest
    needs: model-drift-check
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install prometheus-client psutil
    
    - name: Run monitoring health check
      run: |
        python -c "
        from src.monitoring import ModelMonitor
        import time
        monitor = ModelMonitor()
        print('Monitoring system initialized successfully')
        time.sleep(5)  # Let it collect initial metrics
        print('Health check completed')
        "
    
    - name: Validate monitoring data
      run: |
        python -c "
        import os
        import json
        if os.path.exists('models/model_metadata.json'):
            with open('models/model_metadata.json', 'r') as f:
                metadata = json.load(f)
            print(f'Model accuracy: {metadata[\"metrics\"][\"r2\"]}')
            print(f'Active model: {metadata[\"best_model\"]}')
            print('Monitoring validation passed')
        else:
            print('Warning: model_metadata.json not found')
        "

  build-and-push:
    runs-on: ubuntu-latest
    needs: monitoring-health-check
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Set up Docker compose
      uses: docker/setup-qemu-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh production
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKER_REGISTRY: docker.io
        DOCKER_IMAGE_NAME: california-housing-api
    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        # Wait for deployment
        sleep 30
        # Run integration tests
        python tests/integration_tests.py