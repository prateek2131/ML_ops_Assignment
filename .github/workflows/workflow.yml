# .github/workflows/ci_cd.yml
name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run auto-training every 15 minutes
    - cron: '*/15 * * * *'

env:
  DOCKER_IMAGE_NAME: california-housing-api
  DOCKER_REGISTRY: docker.io
  PYTHON_VERSION: 3.9

jobs:
  # ================================
  # CODE QUALITY & TESTING
  # ================================
  test-and-quality:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist flake8 black bandit safety

      - name: Create directories
        run: |
          mkdir -p data/processed models logs artifacts

      - name: Lint and security check
        if: matrix.python-version == '3.9'
        run: |
          # Basic syntax and undefined names check
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Security scan
          bandit -r src/ -f json -o bandit-report.json || true
          # Dependency vulnerability check
          safety check --json --output safety-report.json || true

      - name: Generate test data
        run: |
          python src/data_preprocessing.py

      - name: Run tests
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing -n auto

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.9'
        with:
          file: ./coverage.xml

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.9' && always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ================================
  # MODEL PIPELINE
  # ================================
  model-pipeline:
    name: Model Training & Validation
    runs-on: ubuntu-latest
    needs: test-and-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create directories
        run: |
          mkdir -p data/processed models logs artifacts

      - name: Run data preprocessing
        run: |
          python src/data_preprocessing.py

      - name: Train models
        run: |
          python scripts/train_models.py

      - name: Validate models
        run: |
          python scripts/validate_model.py

      - name: Check model drift
        run: |
          python scripts/check_model_drift.py

      - name: Store model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trained-models
          path: models/
          retention-days: 30

      - name: Store analysis results
        uses: actions/upload-artifact@v4
        with:
          name: model-analysis
          path: logs/drift_*.json
          retention-days: 30

  # ================================
  # A/B TESTING (MAIN BRANCH ONLY)
  # ================================
  ab-testing:
    name: A/B Testing
    runs-on: ubuntu-latest
    needs: model-pipeline
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: models/

      - name: Run A/B testing
        run: |
          python src/ab_testing.py

      - name: Store A/B results
        uses: actions/upload-artifact@v4
        with:
          name: ab-testing-results
          path: |
            logs/ab_test_*.json
            artifacts/ab_test_*.html

  # ================================
  # AUTO-TRAINING (SCHEDULED ONLY)
  # ================================
  auto-training:
    name: Scheduled Auto Training
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create directories
        run: |
          mkdir -p data/processed models logs artifacts

      - name: Run auto training
        run: |
          python scripts/auto_train.py

      - name: Store auto-training artifacts
        uses: actions/upload-artifact@v4
        with:
          name: auto-trained-models-${{ github.run_number }}
          path: |
            models/
            logs/auto_train_*.log

  # ================================
  # DOCKER BUILD & DEPLOY
  # ================================
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [model-pipeline, ab-testing]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: trained-models
          path: models/

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh production
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Wait for deployment
        run: sleep 30

  # ================================
  # POST-DEPLOY VALIDATION
  # ================================
  post-deploy:
    name: Integration Tests & Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests pytest-html

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --html=integration-report.html --self-contained-html

      - name: Setup monitoring
        run: |
          python src/monitoring.py --setup
          python src/monitoring.py --configure-alerts
          python src/monitoring.py --health-check

      - name: Store test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-results
          path: |
            integration-report.html
            logs/integration_*.log
            logs/monitoring_*.log

      - name: Notify success
        if: success()
        run: |
          echo "ðŸŽ‰ Deployment completed successfully!"
          echo "âœ… All tests passed"
          echo "ðŸš€ Application is live"